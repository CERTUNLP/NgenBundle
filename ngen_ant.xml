<?xml version="1.0" encoding="UTF-8"?>

<project name="Lazyprojet" default="build">
    <property environment="env"/>
    <property name="workspace" value="${env.WORKSPACE}" />
    <property name="sourcedir" value="${env.WORKSPACE}/src" />
    <property name="builddir" value="${workspace}/app/build" />

    <target name="build"
          depends="prepare,vendors,cache, assetic, assets, remove_symfony_cache, mkdir_shadowserver_reports, mkdir_evidence, folder_permissions_r, folder_permissions_dr, apc_clear_cache, braincrafted,migrations, lint,phploc,pdepend,phpcpd,phpmd-ci,phpcs-ci,phpdoc,phpunit,phpcb"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdoc"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/docs/*"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${sourcedir}">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${builddir}/logs/phploc.csv" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${sourcedir}" />
            <arg value="text" />
            <arg value="${workspace}/app/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${workspace}/app/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpdoc" description="Generate API documentation using phpDox">
        <exec executable="phpdoc">
            <arg line="-d '${sourcedir}' -t '${builddir}/docs' --title='Tempo' " />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${workspace}/app/phpunit.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${sourcedir}" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>

    <target name="vendors" description="Update vendors">
        <exec executable="composer" dir="${workspace}"  failonerror="true">
            <arg value='update' />
            <arg value='--optimize-autoloader' />
        </exec>
    </target>

    <target name="cache" description="Cleanup cache">
        <exec executable="php" failonerror="true">
            <arg value='${env.WORKSPACE}/app/console' />
            <arg value="cache:clear" />
            <arg value='--env=prod' />
            <arg value='--no-debug' />
        </exec>
    </target>

    <target name="assetic" description="Dumping assets">
        <exec executable="php" failonerror="true">
            <arg value='${env.WORKSPACE}/app/console' />
            <arg value="assetic:dump" />
            <arg value="--env=prod" />
            <arg value="--no-debug" />
        </exec>
    </target>

    <target name="assets" description="Installing assets">
        <exec executable="php" failonerror="true">
            <arg value='${env.WORKSPACE}/app/console' />
            <arg value="assets:install" />
            <arg value="--symlink" />
            <arg value="${env.WORKSPACE}/web" />
        </exec>
    </target>

    <target name="remove_symfony_cache" description="Clear the Symfony cache">
        <exec executable="rm" failonerror="true">
            <arg value="-rf" />
            <arg value="${env.WORKSPACE}/app/logs/* ${env.WORKSPACE}/app/cache/*" />
        </exec>
    </target>

    <target name="mkdir_shadowserver_reports" description="make the shadowserver reports folder">
        <exec executable="mkdir" failonerror="true">
            <arg value="${env.WORKSPACE}/app/Resources/feed/shadowserver/reports" />
            <arg value="-p" />
        </exec>
    </target>

    <target name="mkdir_evidence" description="make the evidence folder">
        <exec executable="mkdir" failonerror="true">
            <arg value="${env.WORKSPACE}/app/Resources/incident/evidence" />
            <arg value="-p" />
        </exec>
    </target>

    <target name="folder_permissions_r" description="allow cache and logs rw">
        <exec executable="setfacl" failonerror="true">
            <arg value="-R" />
            <arg value="-m" />
            <arg value="u:jenkins:rwx" />
            <arg value="-m" />
            <arg value="u:www-data:rwx" />
            <arg value="${env.WORKSPACE}/app/cache" />
            <arg value="${env.WORKSPACE}/app/logs" />
            <arg value="${env.WORKSPACE}/app/Resources/" />
            <arg value="${env.WORKSPACE}/app/Resources/incident/evidence" />
            <arg value="${env.WORKSPACE}/app/Resources/feed/shadowserver/reports" />
        </exec>
    </target>

    <target name="folder_permissions_dr" description="allow cache and logs rw">
        <exec executable="setfacl" failonerror="true">
            <arg value="-dR" />
            <arg value="-m" />
            <arg value="u:jenkins:rwx" />
            <arg value="-m" />
            <arg value="u:www-data:rwx" />
            <arg value="${env.WORKSPACE}/app/cache" />
            <arg value="${env.WORKSPACE}/app/logs" />
            <arg value="${env.WORKSPACE}/app/Resources/" />
            <arg value="${env.WORKSPACE}/app/Resources/incident/evidence" />
            <arg value="${env.WORKSPACE}/app/Resources/feed/shadowserver/reports" />
        </exec>
    </target>

    <target name="apc_clear_cache" description="Clear the APC cache">
        <exec executable="php" failonerror="true">
            <arg value="-r" />
            <arg value="apc_clear_cache();apc_clear_cache('user');apc_clear_cache('opcode');" />
        </exec>
    </target>


    <target name="braincrafted" description="Install the boostrap assets">
        <exec executable="php" failonerror="true">
            <arg value='${env.WORKSPACE}/app/console' />
            <arg value="braincrafted:bootstrap:install" />
        </exec>
    </target>
    
    <target name="migrations" description="doctrine migrations">
        <exec executable="php" failonerror="true">
            <arg value='${env.WORKSPACE}/app/console' />
            <arg value="doctrine:migrations:migrate" />
        </exec>
    </target>


</project>
