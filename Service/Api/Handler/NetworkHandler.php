<?php

/*
 * This file is part of the Ngen - CSIRT Incident Report System.
 *
 * (c) CERT UNLP <support@cert.unlp.edu.ar>
 *
 * This source file is subject to the GPL v3.0 license that is bundled
 * with this source code in the file LICENSE.
 */

namespace CertUnlp\NgenBundle\Service\Api\Handler;

use CertUnlp\NgenBundle\Entity\Entity;
use CertUnlp\NgenBundle\Entity\Network\Network;
use CertUnlp\NgenBundle\Entity\Network\NetworkElement;
use CertUnlp\NgenBundle\Entity\Network\NetworkExternal;
use CertUnlp\NgenBundle\Entity\Network\NetworkInternal;
use CertUnlp\NgenBundle\Service\NetworkRdapClient;
use Doctrine\Common\Persistence\ObjectRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Debug\Exception\ClassNotFoundException;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormFactoryInterface;

class NetworkHandler extends Handler
{


    /**
     * @var NetworkRdapClient
     */
    private $network_rdap_handler;

    public function __construct(EntityManagerInterface $entity_manager, ObjectRepository $repository, AbstractType $entity_ype, FormFactoryInterface $form_factory, NetworkRdapClient $network_rdap_handler)
    {
        parent::__construct($entity_manager, $repository, $entity_ype, $form_factory);
        $this->network_rdap_handler = $network_rdap_handler;
    }

    public function post(array $parameters, bool $csrf_protection = false): Entity
    {
        switch ($parameters['type']) {
            case 'internal':
                $entity = new NetworkInternal($parameters['address']);
                break;
            case 'external':
                $entity = new NetworkExternal($parameters['address']);
                break;
        }
        unset($parameters['type']);
        return parent::post($parameters, $csrf_protection); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $ip
     * @return Network|null
     */
    public function getByHostAddress(string $ip): ?Network
    {
        $network = $this->getRepository()->findOneInRange($ip);

        if (!$network) {
            switch (NetworkElement::guessType($ip)) {
                case FILTER_FLAG_IPV6:
                case FILTER_FLAG_IPV4:
                    return $this->getNetworkRdapHandler()->findByIp($ip);
                    break;
                default:
                    return null;
            }
        }
        return $network;
    }

    /**
     * @return NetworkRdapClient
     */
    public function getNetworkRdapHandler(): NetworkRdapClient
    {
        return $this->network_rdap_handler;
    }

    /**
     * @param Entity|Network $entity
     * @return array
     */
    public function getEntityIdentificationArray(Entity $entity): array
    {
//        $networkDB = $this->getRepository()->findOneByAddress($network->getAddressAndMask());
        return ['address' => $entity->getAddressAndMask()];
    }

    /**
     * @param Entity|Network $entity_db
     * @param Entity|Network $entity
     * @return Entity|Network
     */
    public function mergeEntity(Entity $entity_db, Entity $entity): Entity
    {
        return $entity_db->setNetworkAdmin($entity->getNetworkAdmin())->setNetworkEntity($entity->getNetworkEntity());
    }

    /**
     * @param array $parameters
     * @return Entity|Network
     * @throws ClassNotFoundException
     */
    public function createEntityInstance(array $parameters = []): Entity
    {
        switch ($parameters['type']) {
            case 'internal':
                $entity = new NetworkInternal($parameters['address']);
                break;
            case 'external':
                $entity = new NetworkExternal($parameters['address']);
                break;
            default:
                throw new ClassNotFoundException('Network class: "' . $parameters['type'] . '" does not exist.', null);
        }
        unset($parameters['type']);
        return $entity;
    }

}
