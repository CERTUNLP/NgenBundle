<?php

/*
 * This file is part of the Ngen - CSIRT Incident Report System.
 *
 * (c) CERT UNLP <support@cert.unlp.edu.ar>
 *
 * This source file is subject to the GPL v3.0 license that is bundled
 * with this source code in the file LICENSE.
 */

namespace CertUnlp\NgenBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * IncidentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncidentRepository extends NetworkElementRepository
{


    public function findNotificables($parameters = [])
    {
        $query = $this->createQueryBuilder('i')
            ->where('i.id = :id')
            ->setParameter('id', 135592);

        return $query->getQuery()->getResult();
    }

    public function findByTypeAndAddress($type, $address)
    {
        $qb = $this->createQueryBuilder('i');

        $qb->select('i')
            ->innerJoin('i.origin', 'h')
            ->where($qb->expr()->orX(
                $qb->expr()->eq('h.ip', ':address'),
                $qb->expr()->eq('h.domain', ':address')
            ))
            ->andWhere('i.type = :type')
            ->andWhere('i.isClosed = :closed')
            ->setParameter('type', $type)
            ->setParameter('address', $address)
            ->setParameter('closed', FALSE);

        return $qb->getQuery()->getResult();

    }

    public function findAllUnsolved()
    {
        return $this->queryAllUnsolved()->getQuery()->getResult();
    }

    public function queryAllUnsolved()
    {
        return $this->queryAllOnTreatment()
            ->andWhere('i.unsolvedState != :undefined_state')
            ->andWhere('i.unsolvedState != i.state')
            ->andWhere('i.solveDeadLine <=  CURRENT_TIMESTAMP()')
            ->setParameter('undefined_state', 'undefined');
    }

    public function queryAllOnTreatment(): QueryBuilder
    {
        return $this->queryAllByBehavior('on_treatment');
    }

    public function queryAllByBehavior(string $behavior): QueryBuilder
    {
        $qb = $this->createQueryBuilder('i');
        $qb->select('i')
            ->innerJoin('i.state', 'state')
            ->andWhere('state.incident_state_behavior = :behavior')
            ->setParameter('behavior', $behavior);
        return $qb;

    }

    public function findAllUnattended()
    {
        return $this->queryAllUnattended()->getQuery()->getResult();
    }

    public function queryAllUnattended()
    {
        return $this->queryAllOnTreatment()
            ->andWhere('i.unattendedState != :undefined_state')
            ->andWhere('i.unattendedState != i.state')
            ->andWhere('i.responseDeadLine <=  CURRENT_TIMESTAMP()')
            ->setParameter('undefined_state', 'undefined');
    }

    public function queryAllClosed(): QueryBuilder
    {
        return $this->queryAllByBehavior('closed');
    }

    public function queryAllDiscarded(): QueryBuilder
    {
        return $this->queryAllByBehavior('discarded');
    }

    public function queryAllNew(): QueryBuilder
    {
        return $this->queryAllByBehavior('new');

    }
}
