<?php

/*
 * This file is part of the Ngen - CSIRT Incident Report System.
 *
 * (c) CERT UNLP <support@cert.unlp.edu.ar>
 *
 * This source file is subject to the GPL v3.0 license that is bundled
 * with this source code in the file LICENSE.
 */

namespace CertUnlp\NgenBundle\Repository;

use CertUnlp\NgenBundle\Entity\Network\NetworkElement;
use Doctrine\ORM\EntityRepository;

/**
 * NetworkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NetworkElementRepository extends EntityRepository
{
    public function findByAddress(array $params): ?NetworkElement
    {

        $address = explode('/', $params['address']);
        switch (NetworkElement::guessType($address[0])) {
            case FILTER_FLAG_IPV4:
                return $this->findByIpV4($address[0]);
                break;
            case FILTER_FLAG_IPV6:
                return $this->findByIpV6($address[0]);
                break;
            case FILTER_VALIDATE_DOMAIN:
                return $this->findByDomain($address[0]);
                break;
            default:
                return null;
        }

    }

    public function findByIpV4(string $address): NetworkElement
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('n')
            ->from($this->getClassName(), 'n')
            ->where($qb->expr()->eq('BIT_AND(INET_ATON(:address),n.numeric_ip_v4_mask)', 'n.numeric_ip_v4'))
            ->andWhere('n.isActive = true')
            ->orderBy('n.ip_v4_mask', 'DESC');

        $ip = is_array($address) ? $address['ip_v4'] : $address;
        $qb->setParameter('address', $ip);

        $results = $qb->getQuery()->getResult();
        return $results ? $results[0] : null;
    }

    public function findByIpV6(string $address): NetworkElement
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('n')
            ->from($this->getClassName(), 'n')
            ->where($qb->expr()->eq('BIT_AND(INET6_ATON(:address),n.numeric_ip_v6_mask)', 'n.numeric_ip_v6'))
            ->andWhere('n.isActive = true')
            ->orderBy('n.ip_v6_mask', 'DESC');

        $ip = is_array($address) ? $address['ip_v4'] : $address;
        $qb->setParameter('address', $ip);

        $results = $qb->getQuery()->getResult();
        return $results ? $results[0] : null;
    }

    public function findByDomain(string $domain): NetworkElement
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('n')
            ->from($this->getClassName(), 'n')
            ->andWhere('n.isActive = true')
            ->orderBy('n.numeric_domain', 'DESC');

        $count = substr_count($domain, '.') + 1;

        $qb->where($qb->expr()->eq('SUBSTRING_INDEX(:domain,\'.\',:count1 )', 'n.domain'));
        $qb->setParameter('count1', -1);

        for ($i = $count; $i > 1; $i--) {
            $qb->orWhere($qb->expr()->eq('SUBSTRING_INDEX(:domain,\'.\',:count' . $i . ')', 'n.domain'));
            $qb->setParameter('count' . $i, $i * -1);
        }

        $ip = is_array($domain) ? $domain['domain'] : $domain;

        $qb->setParameter('domain', $ip);

        $results = $qb->getQuery()->getResult();
        return $results ? $results[0] : null;
    }


}
